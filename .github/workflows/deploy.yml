# Build and Deployment Pipeline
# Builds Docker images and deploys to staging/production environments
# Only runs on successful completion of CI and security checks

name: Build & Deploy

on:
  push:
    branches: [main]
    tags: ["v*"]
  workflow_run:
    workflows: ["CI/CD Pipeline", "Security Scan"]
    branches: [main]
    types: [completed]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/mimi-core
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/mimi-web

jobs:
  # Build Backend Docker Image
  build-backend:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'push'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./mimi-core
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

  # Build Frontend Static Assets
  build-frontend:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"
          cache-dependency-path: "./mimi-web/package-lock.json"

      - name: Install dependencies
        working-directory: ./mimi-web
        run: npm ci

      - name: Build application
        working-directory: ./mimi-web
        run: |
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: ./mimi-web/dist/
          retention-days: 30

  # Deploy to Staging Environment
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.ref == 'refs/heads/main' && (github.event.workflow_run.conclusion == 'success' || github.event_name == 'push')
    environment: staging

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: ./frontend-dist

      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          # Add your staging deployment commands here
          # Examples:
          # - Deploy to AWS ECS, EKS, or EC2
          # - Deploy to Google Cloud Run
          # - Deploy to Azure Container Instances
          # - Deploy to Heroku
          # - Deploy to your own infrastructure

          # Example for Docker Compose deployment:
          # ssh ${{ secrets.STAGING_HOST }} "cd /app && docker-compose pull && docker-compose up -d"

          echo "‚úÖ Staging deployment completed"

      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests on staging..."
          # Add basic health checks and smoke tests
          # curl -f https://staging.your-app.com/health || exit 1
          echo "‚úÖ Smoke tests passed"

  # Deploy to Production Environment
  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: ./frontend-dist

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment..."
          # Add your production deployment commands here
          echo "‚úÖ Production deployment completed"

      - name: Run production health checks
        run: |
          echo "üè• Running production health checks..."
          # Add comprehensive health checks
          echo "‚úÖ Production health checks passed"

      - name: Notify team
        if: always()
        run: |
          echo "üì¢ Notifying team about deployment..."
          # Add notifications (Slack, email, etc.)

  # Rollback Capability
  rollback:
    runs-on: ubuntu-latest
    if: failure() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    needs: [deploy-staging, deploy-production]
    environment: production

    steps:
      - name: Rollback deployment
        run: |
          echo "‚ö†Ô∏è Deployment failed, initiating rollback..."
          # Add rollback commands here
          echo "‚úÖ Rollback completed"
