# Code Quality & Linting Pipeline
# Runs code formatting, linting, and style checks on every push/PR
# Ensures consistent code style across the entire codebase

name: Code Quality

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # Python Backend Linting & Formatting
  python-quality:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./mimi-core

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v6
        with:
          python-version: "3.10"

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy bandit safety
          pip install -r requirements.txt

      - name: Check code formatting with Black
        run: |
          black --check --diff app/

      - name: Check import sorting with isort
        run: |
          isort --check-only --diff app/

      - name: Lint with flake8
        run: |
          flake8 app/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Type checking with mypy
        run: |
          mypy app/ --ignore-missing-imports --no-strict-optional

      - name: Security linting with bandit
        run: |
          bandit -r app/ -f json -o bandit-report.json || true
          bandit -r app/

      - name: Check for known security vulnerabilities
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: python-security-reports
          path: |
            ./mimi-core/bandit-report.json
            ./mimi-core/safety-report.json

  # TypeScript/React Frontend Linting & Formatting
  typescript-quality:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./mimi-web

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v5
        with:
          node-version: "20.x"
          cache: "npm"
          cache-dependency-path: "./mimi-web/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Check code formatting with Prettier
        run: |
          npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}"

      - name: Lint with ESLint
        run: |
          npm run lint

      - name: Type checking
        run: |
          npx tsc --noEmit

      - name: Check for circular dependencies
        run: |
          npx madge --circular src/

  # Markdown and Documentation Linting
  documentation-quality:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Lint Markdown files
        uses: articulate/actions-markdownlint@v1
        with:
          config: .markdownlint.json
          files: "**/*.md"
          ignore: "node_modules"

      - name: Check for broken links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: "yes"
          use-verbose-mode: "yes"
          config-file: ".markdown-link-check.json"

  # YAML and Configuration Linting
  config-quality:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Lint YAML files
        run: |
          pip install yamllint
          yamllint .github/workflows/ || true

      - name: Validate Docker files
        uses: hadolint/hadolint-action@v3.3.0
        with:
          dockerfile: ./mimi-core/Dockerfile
          failure-threshold: error
